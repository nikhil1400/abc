{
  "name": "forsake",
  "version": "0.1.1",
  "description": "For RSA sake! Native bindings for rsautl functions",
  "main": "index.js",
  "scripts": {
    "install": "node-gyp configure build",
    "test": "mocha --reporter dot"
  },
  "keywords": [
    "decrypt",
    "encrypt",
    "openssl",
    "rsa",
    "rsautl",
    "sign",
    "verify"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mal/forsake.git"
  },
  "author": {
    "name": "Mal Graty",
    "email": "mal.graty@googlemail.com"
  },
  "license": "ISC",
  "dependencies": {
    "nan": "^1.3.0"
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*"
  },
  "readme": "# Forsake\n\nFor RSA sake! Exposes `openssl rsautl` funtions via a C addon rather than shelling out.\n\n  [![Build Status](https://img.shields.io/travis/mal/forsake/master.svg)](https://travis-ci.org/mal/forsake)\n  [![NPM version](https://img.shields.io/npm/v/forsake.svg)](http://badge.fury.io/js/forsake)\n\n# Installation\n\n```sh\n$ npm install forsake\n```\n\n## API\n\n_n.b._ all keys are `Buffer` instances\n```js\nvar forsake = require('forsake');\n\n// sign\nvar a = forsake.sign('this string', private_key);\n\n// with passphrase\nvar protected_pkey = { key: private_key, passphrase: 'hello' };\nvar b = forsake.sign('this string', protected_pkey);\n\n// with padding\nvar c = forsake.sign('this string', pkey, forsake.RSA_X931_PADDING);\n\n// errors\ntry {\n    forsake.sign('this string', public_key);\n} catch (e) {\n    e.toString(); //=> \"RsaError: Unable to load private key\"\n    e.failures;   //=> [ 'error:0906D06C:PEM routines:PEM_read_bio:no start line' ]\n}\n```\n\n### Notes\n\n  - The API for `encrypt`, `decrypt`, `sign` and `verify` is identical\n  - All errors are of type `RsaError` which is exposed by `forsake`\n  - `RsaError.failures` contains SSL error strings, which can help identify problems\n\n### Keys\n\nThe examples below show all possible types of supported key arguments:\n\n```js\nvar buffer_from_file = fs.readFileSync('id_rsa');\nvar utf8_string = \"-----BEGIN PUBLIC KEY-----\\nblah\\n-----END PUBLIC KEY-----\";\nvar protected_buffer = { key: buf_from_file, passphrase: 'opensesame' };\nvar protected_utf8 = { key: utf8_string, passphrase: 'Alohomora' };\n```\n\n### Padding\n\nForsake exposes the following padding constants:\n\n  - `RSA_NO_PADDING`\n  - `RSA_PKCS1_OAEP_PADDING`\n  - `RSA_PKCS1_PADDING`\n  - `RSA_SSLV23_PADDING`\n  - `RSA_X931_PADDING`\n\n## Support\n\nForsake is able to read PKCS#8, PKCS#1 and X.509 public keys, and PKCS#8 private keys. Passphrases can be used with private keys and the standard padding options are also available.\n\n## License\n\nISC\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mal/forsake/issues"
  },
  "homepage": "https://github.com/mal/forsake",
  "_id": "forsake@0.1.1",
  "_shasum": "f77d61540592e56e605de99b84f7c28a580cc10c",
  "_from": "https://github.com/mal/forsake/archive/windows-compile.tar.gz",
  "_resolved": "https://github.com/mal/forsake/archive/windows-compile.tar.gz"
}
