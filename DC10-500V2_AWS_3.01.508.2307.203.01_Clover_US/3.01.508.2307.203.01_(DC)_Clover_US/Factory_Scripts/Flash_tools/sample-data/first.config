# This is a comment
# Following paths need to be defined here

PSM_CREATE=node utils/psm-creator.js
GEN_SECURE_BOOT2=node utils/gen_boot2.js
GEN_APP_FW=node utils/gen_app_fw.js

BOOT2_IMG=sample-data/boot2.bin
MCUFW_IMG=sample-data/hello_world.bin

MFG_ENCRYPT=0

# variable (option1,option2..)
# options - 
# 		discard - Don't put this column into mfg.bin
#		id - Use this column as ID to name mfg-<id>.bin, boot2-<id>.bin and <MCUFW_IMG>-<id>.bin
#		hexdata - This column contains hexdata to be converted into binary
#		string - This column contains data to be used as a string literals by respective utility
#		decimal - This column contains integer data
#		file - This column contains complete filename. e.g public key and private key variables requires path to respective PEM files
#		enc_algo - This column contains name of encryption algorithm. AES_CCM_256_ENCRYPT for boot2 and AES_CTR_128_ENCRYPT for application firmware are the only supported algorithms. If this column is left blank, no encryption will be performed.
#		enc_key - This column contains encryption key, corresponding to encryption algorithm specified, in hex format. 256-bit encryption key will be required for boot2 and 128-bit encryption key will be required for encrypting application firmware.
#		nonce - This column contains encryption nonce, corresponding to encryption algorithm specified, in hex format. A 12-byte nonce is required for boot2 and 16-byte nonce is required for application firmware. This column is optional. If nonce is not supplied, utility will generate one random nonce internally.
#		sign_algo - This column contains name of the signing algorithm. RSA_SIGN is the only supported algorithm. If this column is left blank, no signing will be performed.
#		hash_algo - This column contains name of the hashing algorithm. SHA256_HASH is the only supported algorithm.
#		pub_key - This column contains complete filename to a PEM public key.
#		prv_key - This column contains complete filename to a PEM private key.
# 		process:<exec-path:arg1:arg2...> - Process value using external executable and put output into mfg.bin. Use "$value" as argument where you want to pass value.
#		boot2:<datatype> - This column contains data required for generating secure boot2. Some of these columns are optional. For example, boot2:enc_algo and boot2:sign_algo are optional. If these columns are left blank, associated column values such as boot2:enc_key, boot2:nonce, boot2:prv_key, boot2:pub_key are ignored while creating secure boot2 image.
#		fw:<datatype> - This column contains data required for generating encrypted application firmware. Some of these columns are optional. For example, fw:enc_algo, fw:sign_algo, fw:hash_algo are optional. If these columns are left blank, associated column values such as fw:enc_key, fw:nonce, fw:prv_key, fw:pub_key are ignored while creating application firmware image.
#		ks:<datatype> - This column contains application specific data that is required to be stored in the keystore section of boot2. These columns are optional. psm_encryption_key and psm_nonce are two such columns whose values will be stored inside keystore section of boot2.
serial_no (id)
fwupg_verification_key (hexdata)
fwupg_encrypt_decrypt_key (hexdata)
homekit.pin (process:node:utils/salt-verifier.js:-p:$value)
prov.pin (process:node:utils/pin-hash-gen.js:-p:$value:-c:sha1:-n:mext_prov_pin)
MAC (discard)
mcufw_encryption_algo (fw:enc_algo, string)
mcufw_encryption_key (fw:enc_key, hexdata)
mcufw_nonce (fw:nonce, hexdata)
mcufw_sign_algo (fw:sign_algo, string)
mcufw_hash_algo (fw:hash_algo, string)
mcufw_public_key (fw:pub_key, file)
mcufw_private_key (fw:prv_key, file)
boot2_encryption_algo (boot2:enc_algo, string)
boot2_encryption_key (boot2:enc_key, hexdata)
boot2_nonce (boot2:nonce, hexdata)
boot2_sign_algo (boot2:sign_algo, string)
boot2_private_key (boot2:prv_key, file)
boot2_public_key (boot2:pub_key, file)
psm_encryption_key (ks:psm_enc_key, hexdata)
psm_nonce (ks:psm_nonce, hexdata)
